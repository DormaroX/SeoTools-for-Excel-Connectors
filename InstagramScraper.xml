<?xml version="1.0" encoding="utf-8" ?>
<Suite Title="Instagram Scraper" Id="InstagramScraper" Category="Social" RequireVersion="8.0" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Instagramscraper.xml">

  <Author Name="Victor" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

  <RestConnector Title="Account Lookup" Id="AccountLookupUsername">
    <Parameters>
      <Text Id="User" Title="Username or URL" Required="true" Debug.DefaultValue="zaralarsson"/>
    </Parameters>
		<Fetch Url="@FetchUserString()"/>
    <Parse>
      <Regex Expr="&quot;edge_followed_by&quot;:{&quot;count&quot;:(\d+)}" Id="Followers" Title="Followers"  Group="1" Converter="Int"/>
      <Regex Expr="&quot;edge_follow&quot;:{&quot;count&quot;:(\d+)}" Id="Follows" Title="Follows" Group="1" Converter="Int"/>
      <Regex Expr="&quot;edge_owner_to_timeline_media&quot;:{&quot;count&quot;:(\d+)" Id="Posts" Title="Posts" Group="1" Converter="Int"/>
      <Regex Expr="&quot;owner&quot;:{&quot;id&quot;:&quot;(\d+)&quot;" Id="UserId" Title="User Id" Group="1" Converter="Auto"/>
      <Regex Expr="&quot;is_private&quot;:(\w+)" Id="Private" Title="Private"  Group="1" Converter="String"/>
			<Compute Expr="@Utils.HtmlDecode(Model.Inp)" Id="Bio" Title="Bio" DefaultValue="">
				<Regex Expr="&quot;description&quot;:&quot;(.*?)&quot;" Id="Inp" Group="1" DefaultValue=""/>
			</Compute>
			<Regex Expr="&quot;external_url&quot;:&quot;(.*?)&quot;" Id="ExternalUrl" Title="External URL" Group="1" Converter="String" DefaultValue=""/>
      <Regex Expr="&quot;profile_pic_url&quot;:&quot;(.*?)&quot;" Id="Avatar" Title="Avatar" Group="1" Converter="String"/>
    </Parse>
  </RestConnector>

  <RestConnector Title="Account Latest Posts" Id="LatestPosts">
    <Parameters>
      <Text Id="User" Title="Username or URL" Required="true" DefaultValue="" Debug.DefaultValue="zaralarsson"/>
    </Parameters>
		<Fetch Url="@FetchUserString()"/>
    <Parse>
      <Regex Expr="shortcode&quot;:&quot;(.*?)&quot;" Group="1" DefaultValue="">
				<Compute Expr="https://www.instagram.com/p/@(Model.PostIdInput)" Id="PostUrl" Title="Post URL" DefaultValue="">
					<Regex Expr=".*" Group="0" Id="PostIdInput" DefaultValue=""/>
				</Compute>
      </Regex>
			<Regex Expr="taken_at_timestamp&quot;:(\d+)" Group="1" Converter.SourceFormat="Unix" >
        <Regex Expr=".*" Id="Created" Title="Created" Group="0" Converter="DateTime" Converter.SourceFormat="Unix"/>
      </Regex>
			<Regex Expr="typename&quot;:&quot;Graph(\w+)" Group="1" DefaultValue="">
				<Compute Expr="@Model.Inp" Id="Type" Title="Type" DefaultValue="">
					<Regex Expr=".*" Group="0" Id="Inp" DefaultValue=""/>
				</Compute>
      </Regex>
			<Regex Expr="edge_liked_by&quot;:{&quot;count&quot;:(\d+)}" Group="1" Converter="Int" DefaultValue="">
        <Regex Expr=".*" Id="Likes" Title="Likes" Group="0" Converter="Long"/>
      </Regex>
			<Regex Expr="edge_media_to_comment&quot;:{&quot;count&quot;:(\d+)}" Group="1" Converter="Long" DefaultValue="">
        <Regex Expr=".*" Id="Comments" Title="Comments" Group="0" Converter="Long"/>
      </Regex>
			<Regex Expr="display_url&quot;:&quot;(.*?)&quot;" Group="1" Converter="String" DefaultValue="">
        <Regex Expr=".*" Id="ImageUrl" Title="Display URL" Group="0" Converter="String"/>
      </Regex>
    </Parse>
  </RestConnector>

  <RestConnector Title="Post Lookup" Id="PostLookup">
    <Parameters>
      <Text Id="Post" Title="Post URL or Shortcode" Required="true" Debug.DefaultValue="https://www.instagram.com/p/BhCZUzgAOhT/"/>
    </Parameters>
    <Fetch Url="@FetchPostString()"/>
    <Parse>
			<Compute Expr="@FetchPostString()" Id="Url" Title="URL" DefaultValue=""/>
      <Regex Expr="taken_at_timestamp&quot;:(\d+)" Id="Created" Title="Created" Group="1" Converter="DateTime" Converter.SourceFormat="Unix" DefaultValue=""/>
      <Regex Expr="media_preview_like&quot;:{&quot;count&quot;:(\d+)" Id="Likes" Title="Likes" Group="1" Converter="Auto" DefaultValue=""/>
      <Regex Expr="media_preview_comment&quot;:{&quot;count&quot;:(\d+)" Id="Comments" Title="Comments" Group="1" Converter="Auto" DefaultValue=""/>
      <Regex Expr="&quot;video_view_count&quot;:(\d+)" Id="VideoViews" Title="Video Views" Group="1" Converter="Auto" DefaultValue=""/>
			<Compute Expr="@Model.Inp" Id="Type" Title="Type" DefaultValue="">
				<Regex Expr="typename&quot;:&quot;Graph(\w+)" Id="Inp" Group="1" DefaultValue=""/>
			</Compute>
      <Regex Expr="&quot;display_resources&quot;:\[{&quot;src&quot;:&quot;(.*?)&quot;" Id="ImageUrl" Title="Display URL" Group="1" Converter="String" DefaultValue=""/>
      <XPath Expr="//meta[@@property='instapp:owner_user_id']" Title="User Id" Id="UserId" Attribute="content" Converter="Auto" DefaultValue=""/>
			<Compute Expr="@FetchUsername()" Id="Username" Title="Username" Converter="Auto" DefaultValue=""/>
			<Compute Expr="https://www.instagram.com/@FetchUsername()" Id="UserUrl" Title="User URL" DefaultValue=""/>
			<Compute Expr="@FetchAvatar()" Id="Avatar" Title="Avatar" DefaultValue=""/>
    </Parse>
  </RestConnector>

  <RestConnector Title="Post Lookup Oembed" Id="PostLookupOembed">
    <Parameters>
      <Text Id="Post" Title="Post URL or Shortcode" Required="true" Debug.DefaultValue="https://www.instagram.com/p/BhCZUzgAOhT/"/>
    </Parameters>
		<Fetch Url="https://api.instagram.com/oembed/?url=@FetchPostString()"/>
    <Parse>
      <JsonPath Expr="media_id" Id="PostId" Title="Post Id"/>
      <Regex Expr="datetime=\\&quot;(.*?)\\&quot;" Id="Created" Title="Created" Group="1" Converter="DateTime"/>
      <JsonPath Expr="title" Id="Text" Title="Caption"/>
      <JsonPath Expr="author_id" Id="AuthorId" Title="Author Id" Converter="Auto"/>
      <JsonPath Expr="thumbnail_url" Id="Thumbnail" Title="Thumbnail"/>
      <JsonPath Expr="author_name" Id="Author" Title="User"/>
      <JsonPath Expr="author_url" Id="AuthorUrl" Title="User URL"/>
    </Parse>
		<Fail>
			<Regex Expr="^No URL Match$" Group="0"/>
		</Fail>
  </RestConnector>

  <RestConnector Title="Hashtag Feed" Id="HashtagFeed">
    <Parameters>
      <Text Id="Hashtag" Title="Hashtag" Required="true" Debug.DefaultValue="summer"/>
      <Select Id="CaptionLanguage" Title="Accessibility Caption Language" DefaultValue="en">
        <DataSource>
          <ISOLanguageCodes/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="70" EvenPages="false">
      <Parse>
				<JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.page_info.end_cursor" Id="Cursor"/>
				<JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.page_info.has_next_page" Id="HasNextPage" Converter="Bool" DefaultValue="false"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Accept-Language'>@Model.CaptionLanguage</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/explore/tags/@(Model.Hashtag)/?__a=1
				@((Model.PageCursor.Page != 0 && Model.HasNextPage) ? "&max_id=" + Model.Cursor : "")
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.edges[*].node">
				<Compute Expr="https://www.instagram.com/p/@Model.Inp" Id="Url" Title="URL">
					<JsonPath Expr="shortcode" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="taken_at_timestamp" Id="Created" Converter="DateTime" Converter.SourceFormat="Unix"/>
				<JsonPath Expr="edge_media_to_caption.edges[0].node.text" Id="Caption"/>
				<Compute Id="Type" Title="Type">
					<Compute.Expr>
						<![CDATA[
						@Regex.Replace(Model.Inp, "Graph", "")
						]]>
					</Compute.Expr>
					<JsonPath Expr="__typename" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="edge_liked_by.count" Id="Likes" Converter="Long"/>
				<JsonPath Expr="edge_media_to_comment.count" Id="Comments" Converter="Long"/>
				<JsonPath Expr="dimensions.height" Id="Height" Converter="Long"/>
				<JsonPath Expr="dimensions.width" Id="Width" Converter="Long"/>
				<JsonPath Expr="display_url" Id="DisplayUrl" Title="Display URL"/>
				<JsonPath Expr="thumbnail_src" Id="Thumbnail"/>
				<JsonPath Expr="owner.id" Id="OwnerId" Converter="Auto"/>
				<Compute Id="AccessibilityCaption" Title="Accessibility Caption">
					<Compute.Expr>
						<![CDATA[
						@{
							string output = Model.Inp;
							string NoPrediction = "";
							string IntroSentence = "";

							var dictLangs = new Dictionary<string, string>();
							dictLangs.Add("en", "No photo description,Image may contain: ");
							dictLangs.Add("sv", "Ingen fotobeskrivning,Bilden kan innehålla: ");
							dictLangs.Add("nb", "Ingen bildebeskrivelse er tilgjengelig.,Bildet kan inneholde: ");
							dictLangs.Add("da", "Ingen tilgængelig billedbeskrivelse.,Billedet indeholder sandsynligvis: ");
							dictLangs.Add("fi", "Kuvan kuvausta ei ole saatavilla.,Kuvan mahdollinen sisältö: ");
							dictLangs.Add("de", "Keine Fotobeschreibung verfügbar.,Bild könnte enthalten: ");
							dictLangs.Add("es", "No hay descripción de la foto disponible.,La imagen puede contener: ");

							if (dictLangs.ContainsKey(Model.CaptionLanguage))
							{
								NoPrediction = dictLangs[Model.CaptionLanguage].Split(',')[0];
								IntroSentence = dictLangs[Model.CaptionLanguage].Split(',')[1];

								if(!Model.Inp.Contains(NoPrediction) && !string.IsNullOrEmpty(Model.Inp))
									output = Regex.Replace(Model.Inp, @IntroSentence, "");
								else
									output = "";
							}
						}
						@output
						]]>
					</Compute.Expr>
					<JsonPath Expr="accessibility_caption" Id="Inp" DefaultValue=""/>
				</Compute>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    string FetchPostString() {
			return (Model.Post.Contains("instagram.com") ? Model.Post : "https://www.instagram.com/p/" + Model.Post);
    }
    string FetchUserString() {
			return (Model.User.Contains("instagram.com") ? Model.User : "https://www.instagram.com/" + Model.User);
    }
		
		string FetchUsername() {
			MatchCollection matches = Regex.Matches(Model.FetchedResult.Body, "\"username\":\"(.*?)\",");
			return matches.Count > 0 ? matches[matches.Count - 1].Groups[1].ToString() : "";
		}
		string FetchAvatar() {
			MatchCollection matches = Regex.Matches(Model.FetchedResult.Body, "\"profile_pic_url\":\"(.*?)\",");
			return matches.Count > 0 ? matches[matches.Count - 1].Groups[1].ToString() : "";
		}
    ]]>
  </RazorFunctions>

</Suite>